name: Precommit - Integration Tests - Mesh Worker Service
on:
  pull_request:
    branches:
    - '*'
jobs:

  integration:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm

    - name: clean disk
      if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt clean
        docker rmi $(docker images -q) -f
        df -h

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set up yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.0/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --help

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Login to GitHub Packages Docker Registry
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: tuteng
        password: ${{ secrets.IMAGE_GITHUB_TOKEN }}

    - name: Auto generate crd model
      run: ./scripts/generate-crd.sh

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Format license
      run: mvn license:format

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Build mesh-worker-service
      run: mvn clean install -DskipTests

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Build pulsar image with mesh-worker-service
      run: |
        PULSAR_IMAGE_TAG=$(mvn -q -Dexec.executable=echo -Dexec.args='${pulsar.version}' --non-recursive exec:exec)
        docker build --tag mesh-worker-service-integration-pulsar:latest --build-arg PULSAR_IMAGE_TAG="$PULSAR_IMAGE_TAG" -f integration-tests/docker/Dockerfile ./

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Deploy k8s cluster env
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 60
        max_attempts: 3
        retry_on: error
        command: |
          .ci/deploy_pulsar_cluster.sh .ci/clusters/values_mesh_worker_service.yaml
        on_retry_command: |
          .ci/cleanup.sh

    - name: verify mesh-worker-service
      timeout-minutes: 15
      run: |
        .ci/verify_mesh_worker_service.sh

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: verify package management service
      timeout-minutes: 15
      run: |
        .ci/verify_package_management_service.sh

      env:
        CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: failure()

